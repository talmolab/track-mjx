# Copyright 2024 The Brax Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Proximal policy optimization training.

See: https://arxiv.org/pdf/1707.06347.pdf
"""

from typing import Any, Tuple

from brax.training import types
from brax.training.agents.ppo import networks as ppo_networks
from brax.training.types import Params
import flax
import jax
import jax.numpy as jnp

from flax import linen as nn


@flax.struct.dataclass
class PPONetworkParams:
    """Contains training state for the learner."""

    policy: Params
    value: Params


def compute_gae(
    truncation: jnp.ndarray,
    termination: jnp.ndarray,
    rewards: jnp.ndarray,
    values: jnp.ndarray,
    bootstrap_value: jnp.ndarray,
    lambda_: float = 1.0,
    discount: float = 0.99,
):
    """Calculates the Generalized Advantage Estimation (GAE).

    Args:
      truncation: A float32 tensor of shape [T, B] with truncation signal.
      termination: A float32 tensor of shape [T, B] with termination signal.
      rewards: A float32 tensor of shape [T, B] containing rewards generated by
        following the behaviour policy.
      values: A float32 tensor of shape [T, B] with the value function estimates
        wrt. the target policy.
      bootstrap_value: A float32 of shape [B] with the value function estimate at
        time T.
      lambda_: Mix between 1-step (lambda_=0) and n-step (lambda_=1). Defaults to
        lambda_=1.
      discount: TD discount.

    Returns:
      A float32 tensor of shape [T, B]. Can be used as target to
        train a baseline (V(x_t) - vs_t)^2.
      A float32 tensor of shape [T, B] of advantages.
    """

    truncation_mask = 1 - truncation
    # Append bootstrapped value to get [v1, ..., v_t+1]
    values_t_plus_1 = jnp.concatenate(
        [values[1:], jnp.expand_dims(bootstrap_value, 0)], axis=0
    )
    deltas = rewards + discount * (1 - termination) * values_t_plus_1 - values
    deltas *= truncation_mask

    acc = jnp.zeros_like(bootstrap_value)
    vs_minus_v_xs = []

    def compute_vs_minus_v_xs(carry, target_t):
        lambda_, acc = carry
        truncation_mask, delta, termination = target_t
        acc = delta + discount * (1 - termination) * truncation_mask * lambda_ * acc
        return (lambda_, acc), (acc)

    (_, _), (vs_minus_v_xs) = jax.lax.scan(
        compute_vs_minus_v_xs,
        (lambda_, acc),
        (truncation_mask, deltas, termination),
        length=int(truncation_mask.shape[0]),
        reverse=True,
    )
    # Add V(x_s) to get v_s.
    vs = jnp.add(vs_minus_v_xs, values)

    vs_t_plus_1 = jnp.concatenate([vs[1:], jnp.expand_dims(bootstrap_value, 0)], axis=0)
    advantages = (
        rewards + discount * (1 - termination) * vs_t_plus_1 - values
    ) * truncation_mask
    return jax.lax.stop_gradient(vs), jax.lax.stop_gradient(advantages)


def compute_ppo_loss(
    params: PPONetworkParams,
    normalizer_params: Any,
    data: types.Transition,
    rng: jnp.ndarray,
    ppo_network: ppo_networks.PPONetworks,
    entropy_cost: float = 1e-4,
    kl_weight: float = 1e-3,
    discounting: float = 0.9,
    reward_scaling: float = 1.0,
    gae_lambda: float = 0.95,
    clipping_epsilon: float = 0.3,
    normalize_advantage: bool = True,
    use_lstm: bool = True,
) -> Tuple[jnp.ndarray, types.Metrics]:
    """Computes PPO loss.

    Args:
      params: Network parameters,
      normalizer_params: Parameters of the normalizer.
      data: Transition that with leading dimension [B, T]. extra fields required
        are ['state_extras']['truncation'] ['policy_extras']['raw_action']
          ['policy_extras']['log_prob']
      rng: Random key
      ppo_network: PPO networks.
      entropy_cost: entropy cost.
      discounting: discounting,
      reward_scaling: reward multiplier.
      gae_lambda: General advantage estimation lambda.
      clipping_epsilon: Policy loss clipping epsilon
      normalize_advantage: whether to normalize advantage estimate
      use_lstm: boolean argument for using lstm decoder
      

    Returns:
      A tuple (loss, metrics)
    """

    _, policy_key, entropy_key = jax.random.split(rng, 3)
    parametric_action_distribution = ppo_network.parametric_action_distribution
    policy_apply = ppo_network.policy_network.apply
    value_apply = ppo_network.value_network.apply
    
    # Put the time dimension first.
    data = jax.tree_util.tree_map(lambda x: jnp.swapaxes(x, 0, 1), data)
    
    hidden_state = (data.extras['hidden_state'][0], data.extras['cell_state'][0]) # take in first hidden again to unroll
    hidden_state = jax.tree_map(jax.lax.stop_gradient, hidden_state)
    
    jax.debug.print("[DEBUG SHAPE]: {}", hidden_state[0].shape)
    
    print(f'In loss function, the data shape is {data.observation.shape}')
    print(f'In loss function, the data hidden shape is {hidden_state[1].shape}')
    
    if use_lstm:
      
      def scan_policy_fn(carry, inputs):
          """
          carry: (h, c) hidden state for LSTM
          x_t: observations at time t with shape [B, obs_dim]
          """
          (h, c) = carry
          x_t, next_done, data_extras = inputs
          
          # h, c = data_extras["hidden_state"], data_extras["cell_state"]

          logits_t, latent_mean_t, latent_logvar_t, new_hidden_state = policy_apply(
              normalizer_params,
              params.policy, 
              x_t, # obs for time t
              policy_key,
              (h, c),
              get_activation=False,
              use_lstm=True,
          )
          (new_h, new_c) = new_hidden_state
          done_mask = next_done[:, None]
          batch_size = h.shape[0]
          lstm_cell = nn.LSTMCell(features=h.shape[1])
          reset_h, reset_c = lstm_cell.initialize_carry(jax.random.PRNGKey(0), (batch_size, h.shape[1]))
          new_h = jnp.where(done_mask, reset_h, new_h)
          new_c = jnp.where(done_mask, reset_c, new_c)

          # accumulate some fields for the entire sequence
          return (new_h, new_c), (logits_t, latent_mean_t, latent_logvar_t, h, c) # store input to stack up
      
      (final_h, final_c), (policy_logits, latent_mean, latent_logvar, stack_h, stack_c) = jax.lax.scan(
          scan_policy_fn,
          hidden_state, # carry only hidden state
          (data.observation, 1 - data.discount, data.extras) # scan over 20 in (20, 512, data_dim) & discount is opposite to done
      )
      
      # diffs_h = jnp.linalg.norm(stack_h - data.extras["hidden_state"], axis=(1, 2)) # length 20, stack_h need to consider first h
      # diffs_c = jnp.linalg.norm(stack_c - data.extras["cell_state"], axis=(1, 2))
      # diff_logits = jnp.linalg.norm(policy_logits - data.extras["policy_extras"]['logits'], axis=(1, 2))
      
      # jax.debug.print("0, -1 diffs_h: {}, {}", diffs_h[0], diffs_h[-1])
      # jax.debug.print("0, -1 diffs_c: {}, {}", diffs_c[0], diffs_c[-1])
      # jax.debug.print("0, -1 diff_logits: {}, {}", diff_logits[0], diff_logits[-1])
      
      # should be independent across loss update not used anymore
      new_hidden_state = jax.tree_map(jax.lax.stop_gradient, (final_h, final_c))
      
      print(f'In loss function, the new hidden shape is {new_hidden_state[0].shape}')
      print(f'In loss function, the logit shape is {policy_logits.shape}')
        
    else:
      policy_logits, latent_mean, latent_logvar = policy_apply(
      normalizer_params, params.policy, data.observation, policy_key, None, get_activation=False, use_lstm=use_lstm
      )

    baseline = value_apply(normalizer_params, params.value, data.observation)

    bootstrap_value = value_apply(
        normalizer_params, params.value, data.next_observation[-1]
    )

    rewards = data.reward * reward_scaling
    truncation = data.extras["state_extras"]["truncation"]
    termination = (1 - data.discount) * (1 - truncation)

    target_action_log_probs = parametric_action_distribution.log_prob(
        policy_logits, data.extras["policy_extras"]["raw_action"]
    )
    behaviour_action_log_probs = data.extras["policy_extras"]["log_prob"]

    vs, advantages = compute_gae(
        truncation=truncation,
        termination=termination,
        rewards=rewards,
        values=baseline,
        bootstrap_value=bootstrap_value,
        lambda_=gae_lambda,
        discount=discounting,
    )
    if normalize_advantage:
        advantages = (advantages - advantages.mean()) / (advantages.std() + 1e-8)
    rho_s = jnp.exp(target_action_log_probs - behaviour_action_log_probs)

    surrogate_loss1 = rho_s * advantages
    surrogate_loss2 = (
        jnp.clip(rho_s, 1 - clipping_epsilon, 1 + clipping_epsilon) * advantages
    )

    policy_loss = -jnp.mean(jnp.minimum(surrogate_loss1, surrogate_loss2))

    # Value function loss
    v_error = vs - baseline
    v_loss = jnp.mean(v_error * v_error) * 0.5 * 0.5

    # Entropy reward
    entropy = jnp.mean(
        parametric_action_distribution.entropy(policy_logits, entropy_key)
    )
    entropy_loss = entropy_cost * -entropy

    # KL Divergence for latent layer
    kl_latent_loss = kl_weight * (
        -0.5
        * jnp.mean(1 + latent_logvar - jnp.square(latent_mean) - jnp.exp(latent_logvar))
    )

    total_loss = policy_loss + v_loss + entropy_loss + kl_latent_loss
    return total_loss, {
        "total_loss": total_loss,
        "policy_loss": policy_loss,
        "v_loss": v_loss,
        "kl_latent_loss": kl_latent_loss,
        "entropy_loss": entropy_loss,
    } # need to be just two things for jax.value_and_grad(loss_fn, has_aux=has_aux) to work
